{"name":"Frontend Components-based Architecture","tagline":"javascript, frontend, architecture","body":"# Intro\r\nThis article is accumulation of my experience building frontend apps architectures. Concepts i am writing about are fine for small and big apps, mobile and web.\r\nI assume that everyone knows BackboneJS basics or at least understands that i am talking about.\r\n\r\n## Problem\r\nWhen application starts growing it takes more and more time to add new features, catch bugs and make refactoring.\r\nI assume that everyone will understand BackboneJS examples.\r\n\r\n## Why this happens?\r\n\r\n1. Cross dependencies\r\nIt's common practice when you need something that does not exist in current file but exist somewhere else in your project, you are just importing staff you need and use it.\r\nFor example:\r\n\r\n```js\r\nheader-view.js\r\n\r\nvar StatsView = require('views/stats'),\r\n    StatsModel = require('models/stats');\r\n\r\nvar HeaderView = Backbone.View.extend({\r\n  render: function() {\r\n    var statsModel = new StatsModel(),\r\n        statsView = new StatsView({model: statsModel});\r\n    statsModel.fetch({success: function() {\r\n      this.$('.user').html(statsView.render().$el);\r\n    }});\r\n  }\r\n});\r\n```\r\n\r\nThis is good and bad.\r\nGood - it looks pretty easy - if we need show Stats view in some place we can just include it and use.\r\nBad - Header view should know about internal Stats view implementation. It should know that it requires Stats model and should fetch data before render.\r\n\r\nAnd what happens if StatsView will be changed? If it will use for example Collection instead of Model? This case we should make lookup if whole project to understand who is using our StatsView and modify each entry.\r\n\r\nThis moves us to second problem\r\n\r\n2. Big scope\r\nDevelopers should always keep in mind whole project because they should know what part of the project is using current file (view, model etc) they are working on.\r\nThis is fine for small projects but a problem for another. Developers start feel fatigue very fast. They want start working on something new and small again.\r\n\r\n3. DRY (don't repeat yourself)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}